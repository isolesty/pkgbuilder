#! /bin/bash

set -e

source lib/common

declare -ra modules=(
    conf/{env,dde}
    lib/{utils,modules}
)

printHelp() {
    cat <<EOF >&2
Usage:
  $0 -n PACKAGE|-d DSC [-a ARCH] [-c NUMBER] [-l CHANGELOG] [-t BRANCH] [-u HOST] [-w WORKDIR] [-b|-p] [-h] [-v]

Package builder for deepin mips team

Help Options:
  -h, --help            Show help options
Application Options:
  -a, --arch=ARCH              Build package for ARCH architecture
  -c, --cl=NUMBER              Build package based on a CL: NUMBER
  -d, --dsc=DSC                Build package according to a DSC, DSC should be
                               a local path or url to Debian src control file
  -l, --changelog=CHANGELOG    Use CHANGELOG as debian package changelog
  -n, --package=PACKAGE        Build PACKAGE
  -t, --target-branch=BRANCH   Check out to specific BRANCH
  -u, --upload=HOST            Upload build artifacts to HOST, you should
                               define HOST in dput config
  -b, --build                  Perform a package build using debuild
  -p, --pbuilder               Perform a package build using pbuilder
                               (recommended for a clean buid)
  -v, --version                Show version

Note:
$0 will not issue any build command (pdebuild or debuild) unless -p or -b option is specified.

Examples:
  $0 -n dde-desktop                            Prepare for building dde-destop
  $0 -n dde-desktop -c 64380 -p                Build dde-desktop with gerrit change 64380
                                               in a pbuilder chroot
  $0 -n dde-desktop -b                         Build dde-desktop from scratch
  $0 -n dde-desktop -b -u staging              Build dde-desktop then upload to staging
  $0 -n dde-api -p -l "Rebuild for testing"    Build dde-api in a clean pbuilder chroot
  $0 -a mips64el -n base-files -p              Build base-files in a clean mips64el chroot
EOF
    exit 0
}

##########
# Real operation starts
##############################
[[ $EUID -eq 0 ]] && die "Don't build package with priviledged user"

loadModule ${modules[@]}

OPTS=$(getopt -n $0 \
        -o 'a:c:d:l:n:t:u:bhpv' \
        --long arch:,cl:,dsc:,changelog:,package:,target-branch:,upload:,build,help,pbuilder,version \
        -- "$@")

[[ $? -eq 0 ]] || die "Sorry! I don't understand!!!"

eval set -- "${OPTS}"

while : ; do
    case $1 in
        -a|--arch)
            ARCH=$2
            shift 2
            ;;
        -c|--cl)
            CHANGELIST=$2
            [[ $CHANGELIST -eq 0 ]] && die "CL $CHANGELIST is illegal"
            shift 2
            ;;
        -d|--dsc)
            dscurl=$2
            shift 2
            ;;
        -l|--changelog)
            changelog=$2
            shift 2
            ;;
        -n|--package)
            package=$2
            shift 2
            ;;
        -t|--target-branch)
            targetbranch=$2
            shift 2
            ;;
        -u|--upload)
            uhost=$2
            shift 2
            ;;
        -b|--build)
            do_build=1
            shift
            ;;
        -p|--pbuilder)
            usepbuilder=1
            do_build=1
            shift
            ;;
        -h|--help)
            printHelp
            shift
            ;;
        -v|--version)
            printVersion
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            printHelp
            shift
            ;;
    esac
done

contains $ARCH ${ARCHITECTURES[@]} || die "$ARCH is an unsupported architecture"

loadModule conf/cowbuilder

[[ -z $changelog ]] && changelog="Rebuild on ${ARCH}"

if [[ -n ${package} ]] ; then
    createdir $REPOBASE

    # set git repository
    if contains $package ${dde_components[@]}; then
        repository=${BASEURI}/dde/${package}
    else
        if [[ ${package} = lastore-daemon* ]]; then
            repository=${BASEURI}/lastore/${package}
        else
            repository=${BASEURI}/${package}
        fi
    fi

    [[ ${package} == deepin-default-settings ]] && \
        repository=${BASEURI}/${package##deepin-}
fi

if [[ -n ${dscurl} ]] ;then
    downloadDebianSrc
else
    createSrcArchives
fi
printBuildInfo
prepareBuild
createPbuilderChroot
buildPackage $@
uploadArtifacts

# vim: number tabstop=4 softtabstop=4 expandtab
