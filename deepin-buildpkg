#! /bin/bash
# TODO:
#   1. rewrite
#   2. cowbuilder support
#   3. eatmydata
#   4. git-buildpackage
#   5. use dpkg-buildpackage hooks
# Features:
#   1. gerrit/git-review support
#   2. pbuilder support
#   3. dget and dput wrapper

set -e

declare -r WORKBASE=/mnt/packages
declare -r BASEURI=http://cr.deepin.io
declare -r REPOBASE=${WORKBASE}/git-repos
declare -r SVERSION="v0.1.0"
declare -r DBPKGOPTS="-us -uc -sa -j8"
declare -i CHANGELIST=

declare BOPTS=
declare PKGVER=

declare -r dde_components=(
    dde-account-faces
    dde-api
    dde-calendar
    dde-control-center
    dde-daemon
    dde-desktop
    dde-dock
    dde-file-manager
    dde-help
    dde-launcher
    dde-session-ui
    libdui
    startdde
)

declare -r raccoon_components=(
    dbus-factory
    dde-api
    dde-control-center
    dde-daemon
    dde-desktop
    dde-dock
    dde-launcher
    dde-session-ui
    deepin-desktop-base
    deepin-desktop-schemas
    startdde
)

printVersion() {
    echo "$0 version $SVERSION"
    exit 0
}

printHelp() {
    cat <<EOF >&2
Usage:
  $0 [-c NUMBER] [-l CHANGELOG] -n PACKAGE|-d DSC [-t BRANCH] [-u HOST] [-w WORKDIR] [-b|-p] [-h] [-v]

Build script for deepin mipsel package team

Help Options:
  -h, --help            Show help options
Application Options:
  -c, --cl=NUMBER              Build package based on a CL: NUMBER
  -d, --dsc=DSC                Build package according to a DSC, DSC should be
                               a local path or url to Debian src control file
  -l, --changelog=CHANGELOG    Use CHANGELOG as debian package changelog
  -n, --package=PACKAGE        Build PACKAGE
  -t, --target-branch=BRANCH   Check out to specific BRANCH
  -u, --upload=HOST            Upload build artifacts to HOST, you should
                               define HOST in dput config
  -w, --workdir=DIR            Override the default WORKDIR
  -b, --build                  Perform a package build using debuild
  -p, --pbuilder               Perform a package build using pbuilder
                               (recommended for a clean buid)
  -v, --version                Show version

Note:
$0 will not issue any build command (pbuilder or debuild) unless -p or -b option is specified.

Examples:
  $0 -n dde-desktop                            Prepare for building dde-destop
  $0 -n dde-desktop -b                         Build dde-desktop from scratch
  $0 -n dde-desktop -b -u staging              Build dde-desktop then upload to staging
  $0 -n dde-api -p -n "Rebuild for testing"    Build dde-api in a clean pbuilder chroot
EOF
    exit 0
}

die() {
    echo "$BASH_LINENO: $@" >&2
    exit 1
}

has_bin() {
    local executable=$1
    if [[ -n $(type $1) ]] ; then
        return 0
    else
        return 1
    fi
}

has_package() {
    local pkg=$1
    if dpkg-query -f '${binary:Package}\n' -W | grep -wqs $pkg ; then
        return 0
    else
        return 1
    fi
}

configGitReview() {
    echo "create per project gitreview configuration"
    if [[ ! -f .gitreview ]] ; then
        cat <<EOF > .gitreview
[gerrit]
defaultremote = origin
EOF
    fi
}

downloadGerritChange() {
    if has_bin git-review ; then
        git review -d $1
    else
        die "Missing git-review in the system!!!"
    fi
}

assert() {
    local ret
    eval ret=\$${1}
    [[ -n $ret ]] || die "I'm confused, var: ${1} is empty"
}

pushd() {
    builtin pushd $@ >& /dev/null
}

popd() {
    builtin popd $@ >& /dev/null
}

contains() {
    local element=
    local result=1
    for element in ${@:2}; do
    if [[ $element == $1 ]] ; then
        result=0
        break
    fi
    done
    return $result
}

createdir() {
    local dir=$1
    local desc=$2
    if [[ ! -d ${dir} ]];then
        echo "create $2 directory: $dir"
        mkdir -p $dir
    fi
}

has_patch() {
    if [[ -d $patchdir ]] ; then
        return 0
    else
        return 1
    fi
}

pkgIsDebianized() {
    if [[ -d debian ]] ; then
        return 0
    else
        return 1
    fi
}

dquilt() {
    local quiltrc=${HOME}/.quiltrc-dpkg

    if [[ ! -f $quiltrc ]] ; then
        echo "Write quilt configuration: $quiltrc"

        cat <<'EOF' >>$quiltrc
d=. ; while [ ! -d $d/debian -a `readlink -e $d` != / ]; do d=$d/..; done
if [ -d $d/debian ] && [ -z $QUILT_PATCHES ]; then
    # if in Debian packaging tree with unset $QUILT_PATCHES
    QUILT_PATCHES="debian/patches"
    QUILT_PATCH_OPTS="--reject-format=unified"
    QUILT_DIFF_ARGS="-p ab --no-timestamps --no-index --color=auto"
    QUILT_REFRESH_ARGS="-p ab --no-timestamps --no-index"
    QUILT_COLORS="diff_hdr=1;32:diff_add=1;34:diff_rem=1;31:diff_hunk=1;33:diff_ctx=35:diff_cctx=33"
    if ! [ -d $d/debian/patches ]; then mkdir $d/debian/patches; fi
fi
EOF
    fi

    quilt --quiltrc=${quiltrc} -f $@
}

debsrcFormatter() {
    local sformat=
    local sformatfile=debian/source/format
    local quilt="3.0 (quilt)"

    if [[ -f $sformatfile ]] ; then
        sformat=$(cat $sformatfile)
    fi

    if [[ $sformat =~ 3.0[[:space:]]\((native|quilt)\) ]] ; then
        echo "${package} has debsrc 3.0 format: $sformat"
    fi

    if has_patch; then
        echo "Found patches, set package source format to debsrc 3.0 quilt"
        sformat=$quilt
        createdir ${sformatfile//format}; echo $sformat > ${sformatfile}
    fi

    if [[ $sformat == $quilt ]] ; then
        PKGVER="${PKGVER}-1"
        echo -e "\n\n\n\n\t\t\tI'm here PKGVER=${PKGVER}\n\n\n"
    fi
}

fixBuildDeps() {
    echo "Replace golang-go in build deps with gccgo-5"
    if pkgIsDebianized ; then
        sed -e 's@golang-go\s*,@gccgo-5 | &@g' -i debian/control
    fi
}

fixDebuildOptions() {
    if pkgIsDebianized ; then
        if grep -wqs golang-go debian/control ; then
            echo "Golang package detected, trying to fix debuild option"
            BOPTS+="-e USE_GGCGO=1 -e CGO_ENABLED=1 "
        fi
    fi

    [[ $package == deepin-file-manager-backend ]] && \
        BOPTS+="-e CGO_LDTHREAD=-lpthread"

    # package test maybe fail, force return true
    return 0
}

apply_patches() {
    pkgIsDebianized || \
        die "You should debianize your package, workdir: $PWD!!!"

    local patchdir=${WORKBASE}/patches/${package}

    if has_patch $patchdir ; then
        debsrcFormatter

        for patch in $patchdir/*.patch; do
            echo "Import mipsel specific patch: $(basename $patch)"
            dquilt import $patch
        done
    fi
}

hasPbuilderChroot() {
    if [[ -x ${WORKBASE}/base.cow/bin/ls ]] ; then
        return 0
    else
        return 1
    fi
}

initializePbuilder() {
    has_bin pbuilder || die "Install pbuilder!!!"
    has_bin cowbuilder || die "Install cowbuilder!!!"

    # Should I use options instead of configuration?
    echo "Initialize pbuilder configuration"

    # Always overwrite the configuration
    cat <<EOF > ${scriptdir}/pbuilderrc
AUTO_DEBSIGN=no
BINDMOUNT="$WORKBASE"
MIRRORSITE="http://192.168.1.135/debian-mipsel"
OTHERMIRROR="deb http://pools.corp.deepin.com/mipsel-experimental unstable main|deb http://192.168.1.135/mipsel-staging raccoon main"
ALLOWUNTRUSTED=yes
DEBOOTSTRAPOPTS=( '--variant=buildd' '--no-check-gpg' )
EXTRAPACKAGES="lintian gccgo-5 eatmydata"
# pbuilder >= 0.225
# EATMYDATA=yes
export LD_PRELOAD="${LD_PRELOAD:+$LD_PRELOAD:}libeatmydata.so"
EOF

    createdir ${WORKBASE}/deepin-chroot

    sudo cowbuilder --create	 \
         ${PBUILDEROPTS[@]}	 \
         ${PBUILDEREXTRAOPTS[@]} \
         ${COWBUILDEROPTS[@]}
}

# taken from http://stackoverflow.com/questions/3183444/check-for-valid-link-url
checkValidURL() {
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ $1 =~ $regex ]] ; then
        return 0
    else
        return 1
    fi
}

print_build_info() {
cat <<EOF
We're working on
    package:        $package
    workdir:        $workdir
    changelog:      $changelog
    CL:             $CHANGELIST
    repository:     $repository
EOF
}

urlDecode() {
    if grep -qs % $1 ; then
        echo -e "$(echo $1 | sed 's/+/ /g; s/%/\\x/g')"
    else
        echo $1
    fi
}

downloadDebianSrc() {
    local dscfile=
    dscfile=$(basename $(urlDecode ${dscurl}))

    package=${dscfile%%_*}
    PKGVER=$(echo ${dscfile//.dsc} | sed -e "s/${package}_//")

    workdir=${WORKBASE}/${package}

    createdir ${workdir}

    if checkValidURL $dscurl ; then
        has_bin dget || die "Missing devscripts in the system"
        pushd ${workdir}
        dget -d -u ${dscurl}
        popd
    fi

    [[ -f ${workdir}/$(basename $dscurl) ]] || \
        die "Invalid dsc file: $dscfile"
    dscurl=$dscfile
}

make_orig_tarball() {
    local work_branch=${targetbranch:=master}
    local repodir=${REPOBASE}/${package}

    createdir ${workdir}

    if contains ${package} ${raccoon_components[@]} ; then
        work_branch=raccoon
        if [[ $work_branch != $targetbranch ]] ; then
            echo -e "\n\t\tworking branch is not the target branch\n"
        fi
    fi

    echo "Current branch is $work_branch"

    has_bin git || die "Missing git in the system!!!"

    # fetch git repository
    [[ -d ${repodir}/.git ]] || git clone -b ${work_branch} ${repository} ${repodir}

    pushd ${repodir}

    # in case we need to switch branches
    git checkout -B ${work_branch} --track origin/${work_branch}
    git pull origin ${work_branch}

    local commit_id=$(git rev-parse HEAD | cut -b 1-6)
    assert commit_id
    local tag=$(git describe --tags --abbrev=0)
    local revision=$(git log ${tag}..origin/${work_branch} --oneline | wc -l)
    assert revision

    if [[ -z ${tag} ]] ;then
        echo "tag fallback to 0.1"
        tag=0.1
    fi
    assert tag

    # gerrit CL workflow
    if [[ ${CHANGELIST} -gt 1 ]] ; then
        configGitReview
        downloadGerritChange $CHANGELIST
        PKGVER=$tag+cl~$CHANGELIST
    else
        PKGVER=$tag+r${revision}~${commit_id}
    fi

    echo "Create ${package} upstream source tarball..."
    git archive --format=tar --prefix=${package}-${PKGVER}/ HEAD | \
        xz -z > ${workdir}/${package}_${PKGVER}.orig.tar.xz

    popd
}

prepare_build() {
    local srcdir=${workdir}/${package}-${PKGVER}
    local srcpkg=${workdir}/${package}_${PKGVER}.orig.tar.xz

    rm -rf $srcdir

    if [[ -n $dscurl ]] ; then
        dpkg-source -x ${workdir}/${dscurl} ${srcdir}
    else
        if [[ ! -f $srcpkg ]] ; then
            srcpkg=${srcpkg/.orig/}
            [[ -f $srcpkg ]] || die "src package $srcpkg not found"
        fi

        tar xf ${srcpkg} -C ${workdir}

        pushd ${srcdir}
        if ! pkgIsDebianized ; then
            cp -a ${WORKBASE}/pkg_debian/${package}/debian .
        fi
        popd
    fi
}

build_package() {
    pushd ${workdir}/${package}-${PKGVER}

    # Apply patches unless build official package (Not from any CL)
    [[ $CHANGELIST -eq 0 ]] && apply_patches

    fixBuildDeps
    fixDebuildOptions

    if [[ $do_build -eq 1 ]] ; then
        export DEBEMAIL="mips@deepin.com"
        export DEBFULLNAME="Deepin/MIPS Team"

        if [[ -n $dscurl ]] ; then
            dch -i -D unstable "${changelog}"
        else
            dch -v ${PKGVER} -D unstable "${changelog}"
        fi

        if [[ $usepbuilder -eq 1 ]] ; then
            export ${BOPTS//-e}
            has_package eatmydata  ||   \
                die "Please install eatmydata on the build host!!!"

            hasPbuilderChroot || initializePbuilder
            eval pdebuild --pbuilder cowbuilder \
                --use-pdebuild-internal         \
                --debbuildopts '"${DBPKGOPTS}"' \
                ${PBUILDEREXTRAOPTS[@]}         \
                --                              \
                ${PBUILDEROPTS[@]}              \
                ${COWBUILDEROPTS[@]}
        else
            echo "Debuild options: ${BOPTS} ${DBPKGOPTS}"
            eval debuild ${BOPTS} ${DBPKGOPTS}
        fi
    fi
    popd
}

upload_package() {
    [[ -z $uhost ]] && return 0
    has_bin dput || die "Missing dput in the system!!!"
    dput -uf ${uhost} ${workdir}/${package}_${PKGVER}_mipsel.changes
}

[[ $EUID -eq 0 ]] && die "Don't build package with priviledged user"

OPTS=$(getopt -n $0 \
        -o 'c:d:l:n:t:u:w:bhpv' \
        --long cl:,dsc:,changelog:,package:,target-branch:,upload:,workdir:,build,help,pbuilder,version \
        -- "$@")

[[ $? -eq 0 ]] || die "Sorry! I don't understand!!!"

eval set -- "${OPTS}"

while : ; do
    case $1 in
        -c|--cl)
            CHANGELIST=$2
            [[ $CHANGELIST -eq 0 ]] && die "CL $CHANGELIST is illegal"
            shift 2
            ;;
        -d|--dsc)
            dscurl=$2
            shift 2
            ;;
        -l|--changelog)
            changelog=$2
            shift 2
            ;;
        -n|--package)
            package=$2
            shift 2
            ;;
        -t|--target-branch)
            targetbranch=$2
            shift 2
            ;;
        -u|--upload)
            uhost=$2
            shift 2
            ;;
        -w|--workdir)
            workdir=${WORKBASE}/${2}
            shift 2
            ;;
        -b|--build)
            do_build=1
            shift
            ;;
        -p|--pbuilder)
            do_build=1
            usepbuilder=1
            shift
            ;;
        -h|--help)
            printHelp
            shift
            ;;
        -v|--version)
            printVersion
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            printHelp
            shift
            ;;
    esac
done

scriptdir=$(dirname $(readlink -ef $0))

# cowbuilder has not basetgz
#    "--basetgz      ${WORKBASE}/deepin-base.tgz"
declare -ar PBUILDEROPTS=(
    "--distribution unstable"
    "--buildplace   ${WORKBASE}/deepin-chroot"
    "--hookdir      ${scriptdir}/pbuilder-hook.d"
    "--configfile   ${scriptdir}/pbuilderrc"
)

# buildresult must be specifed as pdebuild option
declare -r PBUILDEREXTRAOPTS=(
    "--buildresult  ${WORKBASE}/${package}"
)

declare -ar COWBUILDEROPTS=(
    "--basepath     ${WORKBASE}/base.cow"
    "--buildplace   ${WORKBASE}/deepin-chroot"
)

if [[ -z $dscurl ]] ; then
    assert package
    [[ -z $workdir ]] && workdir=${WORKBASE}/${package}
fi

[[ -z $changelog ]] && changelog="Rebuild on mipsel"

if [[ -n ${package} ]] ; then
    createdir $REPOBASE

    # set git repository
    if contains $package ${dde_components[@]}; then
        repository=${BASEURI}/dde/${package}
    else
        if [[ ${package} = lastore-daemon* ]]; then
            repository=${BASEURI}/lastore/${package}
        else
            repository=${BASEURI}/${package}
        fi
    fi

    [[ ${package} == deepin-default-settings ]] && \
        repository=${BASEURI}/${package##deepin-}
fi

if [[ -n ${dscurl} ]] ;then
    downloadDebianSrc
else
    make_orig_tarball
fi
prepare_build
build_package
upload_package

# vim: number tabstop=4 softtabstop=4 expandtab
