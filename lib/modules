#! /bin/bash

configPbuilder() {
    local pbuilderrc=$1
    # Should I use options instead of configuration?
    info "Initialize pbuilder configuration"

    # Always overwrite the configuration
    cat <<EOF > $pbuilderrc
AUTO_DEBSIGN=no
ARCHITECTURE="${ARCH}"
BINDMOUNT="$WORKBASE"
ALLOWUNTRUSTED=yes
DEBOOTSTRAPOPTS=( '--variant=buildd' '--no-check-gpg' )
EXTRAPACKAGES="lintian eatmydata"
MIRRORSITE="${MIRRORSITE[${ARCH}]}"
# pbuilder >= 0.225
# EATMYDATA=yes
export LD_PRELOAD="${LD_PRELOAD:+$LD_PRELOAD:}libeatmydata.so"
EOF
}

initializePbuilder() {
    hasBin pbuilder   || die "Install pbuilder!!!"
    hasBin cowbuilder || die "Install cowbuilder!!!"

    createdir ${WORKBASE}/deepin-chroot

    sudo cowbuilder --create	 \
         ${PBUILDEROPTS[@]}	 \
         ${PBUILDEREXTRAOPTS[@]} \
         ${COWBUILDEROPTS[@]}
}

# download debian src
downloadDebianSrcFromUpstream() {
    local aptcache=
    local aptdir=${scriptdir}/apt

    local apt_options="-o Dir::Etc=${aptdir} \
        -o Dir::Etc::sourcelist=sources.list-${ARCH} \
	    -o Dir::Etc::SourceParts=/dev/null \
	    -o Dir::State=${aptdir}/state \
	    -o Dir::Cache=${aptdir}/cache \
	    -o Debug::NoLocking=true \
	    -o Acuqire::Retries=5 \
	    -o APT::Architecture=${ARCH} \
	    -o APT::Default-Release=${DISTRIBUTIONS[${ARCH}]} \
	    -o APT::Get::Assume-Yes=true \
	    -o APT::Get::AllowUnauthenticated=true"

    mkdir -pv ${aptdir}/state/lists/partial

    # create sources.list
    cat <<EOF > ${aptdir}/sources.list-${ARCH}
deb [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
deb-src [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
EOF
    # update package index
    apt-get ${apt_options} update

    aptcache=$(apt-cache ${apt_options} showsrc $package)
    # get package name and package version
    package=$(echo "${aptcache}" | awk '/^Package:/ {print $2; exit}')
    PKGVER=$(echo "${aptcache}" | awk -F: '/^Version:/ {gsub(/ /, "", $NF); ver=$NF} END {print ver}')

    # download debian source code
    createWorkdir
    pushd ${workdir}
    apt-get ${apt_options} source --download-only ${package}
    popd
}

downloadDebianSrc() {
    local odscfile=$(basename ${dscurl})
    local dscfile=$(urlDecode $odscfile)

    package=${dscfile%%_*}
    PKGVER=$(echo ${dscfile//.dsc} | sed -e "s/${package}_//")

    createWorkdir

    if checkValidURL $dscurl ; then
        hasBin dget || die "Missing devscripts in the system"
        pushd ${workdir}
        dget -d -u ${dscurl}
        # rename dscfile
        [[ $odscfile == $dscfile ]] || mv $odscfile $dscfile
        popd
    fi

    [[ -f ${workdir}/${dscfile} ]] || \
        die "Not able to find ${dscfile} in ${workdir}"
    dscurl=$dscfile
}

prepareBuild() {
    local srcdir=${workdir}/${package}-${PKGVER}
    local srcpkg=${workdir}/${package}_${PKGVER}.orig.tar.xz

    rm -rf $srcdir

    if [[ -n $dscurl ]] ; then
        dpkg-source -x ${workdir}/${dscurl} ${srcdir}
    elif [[ -f ${workdir}/${package}_${PKGVER}.dsc ]] ; then
        dpkg-source -x ${workdir}/${package}_${PKGVER}.dsc ${srcdir}
    else
        if [[ ! -f $srcpkg ]] ; then
            srcpkg=${srcpkg/.orig/}
            [[ -f $srcpkg ]] || die "src package $srcpkg not found"
        fi

        tar xf ${srcpkg} -C ${workdir}

        pushd ${srcdir}
        if ! pkgIsDebianized ; then
            cp -a ${WORKBASE}/pkg_debian/${package}/debian .
        fi
        popd
    fi
}

createPbuilderChroot() {
    if [[ ${usepbuilder} -eq 1 ]] ; then
        configPbuilder ${scriptdir}/pbuilderrc
        hasPackage eatmydata  ||   \
            die "Please install eatmydata on the build host!!!"
        hasPbuilderChroot || initializePbuilder
    fi
}

buildPackage() {
    # override default dpkg-buildpackage options
    DBPKGOPTS+=" $@"
    pushd ${workdir}/${package}-${PKGVER}

    # Apply patches unless build official package (Not from any CL)
    [[ $CHANGELIST -eq 0 ]] && applyPatches

    if [[ $do_build -eq 1 ]] ; then
        if [[ ${DEEPIN_PACKAGES} =~ " ${package} " ]] ; then
	        dch -v ${PKGVER} -D ${DISTRIBUTIONS[$ARCH]} "${changelog}"
        else
            dch -a -D ${DISTRIBUTIONS[$ARCH]} "${changelog}"
        fi

        if [[ $usepbuilder -eq 1 ]] ; then
            eval pdebuild --pbuilder cowbuilder \
                 --use-pdebuild-internal         \
                 --debbuildopts '"${DBPKGOPTS}"' \
                 ${PBUILDEREXTRAOPTS[@]}         \
                 --                              \
                 ${PBUILDEROPTS[@]}              \
                 ${COWBUILDEROPTS[@]}
        else
            if [[ ${ARCH} == 'sw_64' ]] ; then
                local debuild_hook=sw64-fix-arch.hook
                warn "Add debuild hook ${debuild_hook}"
                BOPTS+=" --build-hook ${scriptdir}/hooks.d/debuild/${debuild_hook}"
            fi
            info "Checking build dependencies:"
            dpkg-checkbuilddeps -a ${ARCH} debian/control && \
                info "Build dependencies satisfied" || \
                    return

            info "Debuild options: ${BOPTS} ${DBPKGOPTS}"
            eval debuild ${BOPTS} ${DBPKGOPTS}
        fi
    fi
    popd
}

uploadArtifacts() {
    [[ -z $uhost ]] && return 0
    hasBin dput || die "Missing dput in the system!!!"
    dput -uf ${uhost} $(ls -At ${workdir}/*.changes| head -n 1)
}
