#! /bin/bash

configPbuilder() {
    local pbuilderrc=$1
    # Should I use options instead of configuration?
    info "Initialize pbuilder configuration"

    # Always overwrite the configuration
    cat <<EOF > $pbuilderrc
APTCACHE=${WORKBASE}/aptcache
AUTO_DEBSIGN=no
ARCHITECTURE=${ARCH}
BINDMOUNT=${WORKBASE}
ALLOWUNTRUSTED=yes
DEBOOTSTRAPOPTS=( '--variant=buildd' '--no-check-gpg' )
EXTRAPACKAGES="lintian eatmydata"
MIRRORSITE="${MIRRORSITE[${ARCH}]}"
# pbuilder >= 0.225
EATMYDATA=yes
EOF
}

initializePbuilder() {
    hasBin pbuilder   || die EPACKAGE "Install pbuilder!!!"
    hasBin cowbuilder || die EPACKAGE "Install cowbuilder!!!"

    createdir ${WORKBASE}/deepin-chroot "Cow master data"

    sudo cowbuilder --create	 \
         ${PBUILDEROPTS[@]}	 \
         ${PBUILDEREXTRAOPTS[@]} \
         ${COWBUILDEROPTS[@]}
}

createPbuilderChroot() {
    if [[ ${build_pkg_via_pbuilder} -eq 1 ]] ; then
        configPbuilder ${scriptdir}/pbuilderrc
        hasPackage eatmydata  ||   \
            die EPACKAGE "Please install eatmydata on the build host!!!"
        hasPbuilderChroot || initializePbuilder
    fi
}

# download debian src
aptGetSource() {
    local aptcache=
    local aptdir=${scriptdir}/apt

    local apt_options="-o Dir::Etc=${aptdir} \
        -o Dir::Etc::sourcelist=sources.list-${ARCH} \
	    -o Dir::Etc::SourceParts=/dev/null \
	    -o Dir::State=${aptdir}/state \
	    -o Dir::Cache=${aptdir}/cache \
	    -o Debug::NoLocking=true \
	    -o Acuqire::Retries=5 \
	    -o APT::Architecture=${ARCH} \
	    -o APT::Default-Release=${DISTRIBUTIONS[${ARCH}]} \
	    -o APT::Get::Assume-Yes=true \
	    -o APT::Get::AllowUnauthenticated=true"

    mkdir -pv ${aptdir}/state/lists/partial

    # create sources.list
    cat <<EOF > ${aptdir}/sources.list-${ARCH}
deb [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
deb-src [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
EOF
    # update package index
    apt-get ${apt_options} update

    aptcache=$(apt-cache ${apt_options} showsrc $package)
    # get package name and package version
    package=$(echo "${aptcache}" | awk '/^Package:/ {print $2; exit}')
    version=$(echo "${aptcache}" | awk -F: '/^Version:/ {gsub(/ /, "", $NF); ver=$NF} END {print ver}')

    # download debian source code
    createWorkdir

    pushd ${workdir}
    apt-get ${apt_options} source --download-only ${package}
    popd
}

downloadDebianSrc() {
    local odscfile=$(basename ${dsc})
    local dscfile=$(urlDecode $odscfile)

    package=${dscfile%%_*}
    version=$(echo ${dscfile//.dsc} | sed -e "s/${package}_//")

    createWorkdir

    if checkValidURL $dsc ; then
        hasBin dget || die EPACKAGE "Missing devscripts in the system"
        pushd ${workdir}
        dget -d -u ${dsc}
        # rename dscfile
        [[ $odscfile == $dscfile ]] || mv $odscfile $dscfile
        popd
    fi

    [[ -f ${workdir}/${dscfile} ]] || \
        die EACCESS "Not able to find ${dscfile} in ${workdir}"
    dsc=$dscfile
}

prepareBuild() {
    local srcdir=${workdir}/${package}-${version}

    info "clean up $srcdir"
    rm -rf $srcdir

    if [[ -z $dsc ]] ; then
        dsc=${package}_${version}.dsc
    fi

    if [[ -f ${workdir}/${dsc} ]] ; then
        dpkg-source -x ${workdir}/${dsc} ${srcdir}
    else
        die EACCESS "Fail to read Debian source control file"
    fi
}

buildPackage() {
    # override default dpkg-buildpackage options
    DEBBUILDOPTS+=" $@"

    pushd ${workdir}/${package}-${version}

    # return unless we want to build a package
    [[ ${build_pkg} -eq 1 ]] || \
        [[ ${build_pkg_via_pbuilder} -eq 1 ]] || return 0

    local hookdir=${scriptdir}/hooks.d/debuild
    # pbuilder will copy hooks into chroots
    [[ ${build_pkg_via_pbuilder} ]] && hookdir=/tmp/hooks

    dch -a -D ${DISTRIBUTIONS[$ARCH]} "${changelog}"

    case ${ARCH} in
        sw_64)
            warn "Add a build hook for ${ARCH} platform"
            DEBBUILDOPTS+=" --hook-build=${hookdir}/sw64-fix-arch.hook"
	        ;;
    esac

    if [[ $build_pkg -eq 1 ]] ; then
        info "Checking build dependencies:"
        if dpkg-checkbuilddeps -a ${ARCH} debian/control; then
            info "Build dependencies satisfied"
        else
            die EDEPS "Build dependencies unsatisfied"
        fi

        info "buildpackage with options: ${DEBBUILDOPTS}"
        eval dpkg-buildpackage ${DEBBUILDOPTS}
    else
        rm -f ${workdir}/success
        eval pdebuild --pbuilder cowbuilder  \
             --use-pdebuild-internal         \
             --debbuildopts '"${DEBBUILDOPTS}"' \
             ${PBUILDEREXTRAOPTS[@]}         \
             --                              \
             ${PBUILDEROPTS[@]}              \
             ${COWBUILDEROPTS[@]}
        [[ -f ${workdir}/success ]] || die EBUILD "Failed to build ${package}-${version}"
    fi

    popd
}

uploadArtifacts() {
    [[ -z $uhost ]] && return 0
    hasBin dput || die EPACKAGE "Missing dput in the system!!!"
    dput -uf ${uhost} $(ls -At ${workdir}/*.changes| head -n 1)
}
